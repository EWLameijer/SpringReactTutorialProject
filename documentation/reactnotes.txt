https://www.baeldung.com/spring-security-login-react
https://www.bezkoder.com/spring-boot-react-jwt-auth/
    https://www.bezkoder.com/spring-boot-jwt-authentication/ tot Configure Spring Datasource, JPA, App properties
https://www.youtube.com/watch?v=bqFjrhRrvy8 => tot 20:29

https://developer.okta.com/blog/2022/06/17/simple-crud-react-and-spring-boot
    https://developer.okta.com/blog/2022/06/17/simple-crud-react-and-spring-boot#add-a-react-groupedit-component

https://www.taniarascia.com/crud-app-in-react-with-hooks/


Note: You can use ResponseEntity to return values with a status code in Spring

– WebSecurityConfigurerAdapter is the crux of our security implementation. It provides HttpSecurity configurations to
configure cors, csrf, session management, rules for protected resources. We can also extend and customize the default
configuration that contains the elements below.

– UserDetailsService interface has a method to load User by username and returns a UserDetails object that Spring
Security can use for authentication and validation.

– UserDetails contains necessary information (such as: username, password, authorities) to build an Authentication
object.

– UsernamePasswordAuthenticationToken gets {username, password} from login Request, AuthenticationManager will use it to
 authenticate a login account.

– AuthenticationManager has a DaoAuthenticationProvider (with help of UserDetailsService & PasswordEncoder) to validate
UsernamePasswordAuthenticationToken object. If successful, AuthenticationManager returns a fully populated Authentication object (including granted authorities).

– OncePerRequestFilter makes a single execution for each request to our API. It provides a doFilterInternal() method
that we will implement parsing & validating JWT, loading User details (using UserDetailsService), checking Authorizaion (using UsernamePasswordAuthenticationToken).

– AuthenticationEntryPoint will catch unauthorized error and return a 401 when Clients access protected resources
without authentication.

Needed?
<dependency>
	<groupId>io.jsonwebtoken</groupId>
	<artifactId>jjwt-api</artifactId>
	<version>0.11.5</version>
</dependency>

<dependency>
	<groupId>io.jsonwebtoken</groupId>
	<artifactId>jjwt-impl</artifactId>
	<version>0.11.5</version>
	<scope>runtime</scope>
</dependency>

<dependency>
	<groupId>io.jsonwebtoken</groupId>
	<artifactId>jjwt-jackson</artifactId>
	<version>0.11.5</version>
	<scope>runtime</scope>
</dependency>